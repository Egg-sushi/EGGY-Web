import React from 'react';
import Head from 'next/head';
import styled from '@emotion/styled';
import { useRouter } from 'next/router';
import { ReadonlyURLSearchParams, useSearchParams } from 'next/navigation';

import { useDisclosure } from '@/hooks';
import { DUMMY_PRODUCT } from '@/dummy/cosmetic';
import type { ProductFilter } from '@/types/product';
import { ProductListWithTitle, Flex, Header, Modal, SearchBar } from '@/components';

const initialFilters = (searchParams: ReadonlyURLSearchParams) => ({
  categories: searchParams.get('categories')?.split(',') ?? [],
  search: searchParams.get('search') ?? '',
});

export default function ProductList() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { isOpen, onClose, onOpen } = useDisclosure();
  const [filters, setFilters] = React.useState<ProductFilter>(initialFilters(searchParams));

  const saveOnParams = React.useCallback(
    (name: string, value: string) => {
      const params = new URLSearchParams(searchParams);

      params.set(name, value);
      return params.toString();
    },
    [searchParams],
  );

  const handleFilterModalClose = React.useCallback(
    (categories: ProductFilter['categories']) => {
      setFilters((prev) => ({ ...prev, categories }));
      router.push(`/products?${saveOnParams('categories', categories.map((v) => v).join(','))}`);
      onClose();
    },
    [onClose, router, saveOnParams],
  );

  const handleClickSearch = React.useCallback(() => {
    router.push(`/products?${saveOnParams('search', filters.search)}`);
  }, [filters.search, router, saveOnParams]);

  React.useEffect(() => {
    const initFilters = initialFilters(searchParams);
    setFilters({ ...initFilters, categories: initFilters.categories.filter((v) => v !== '') });
  }, [searchParams]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main style={{ paddingInline: 34, paddingBlock: 80 }}>
        <SearchBar
          value={filters.search}
          filters={filters.categories}
          onChange={(e) => setFilters((prev) => ({ ...prev, search: e.target.value }))}
          onClickFilter={onOpen}
          onSearch={handleClickSearch}
        />
        <FlexWithLine flexDirection="column" gap={32} style={{ marginTop: 28 }}>
          <ProductListWithTitle title={'SERUM'} products={[...Array(3)].map(() => DUMMY_PRODUCT)} />
          <ProductListWithTitle
            title={'Cleansing'}
            products={[...Array(3)].map(() => DUMMY_PRODUCT)}
          />
          <ProductListWithTitle
            title={'LOTION'}
            products={[...Array(3)].map(() => DUMMY_PRODUCT)}
          />
        </FlexWithLine>
      </main>
      <Modal
        type="filter"
        isOpen={isOpen}
        onClose={onClose}
        onSaveClose={handleFilterModalClose}
        data={filters}
      />
    </>
  );
}

const FlexWithLine = styled(Flex)`
  & > div:not(:first-of-type) {
    padding-top: 16px;
    border-top: ${({ theme }) => `1px solid ${theme.colors.gray200}`};
  }
`;
