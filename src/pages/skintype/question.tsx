import Head from 'next/head';
import React from 'react';
import styled from '@emotion/styled';
import { useTheme } from '@emotion/react';

import useLink from '@/hooks/useLink';
import useBaumann from '@/hooks/useBaumann';
import { Button, Flex, Icon, ProgressBar, Text } from '@/components';
import type { BaumannQNA, BaumannQuestion } from '@/types/baumann';
import { getAnswers, saveAnswer, resetAnswers } from '@/utils/baumann';

export default function SkinTypeTest() {
  const theme = useTheme();
  const link = useLink();
  const [activeAnswer, setActiveAnswer] = React.useState<BaumannQNA['Baumann_Answer'][0] | null>(
    null,
  );
  const [currentQnaIndex, setCurrentQnaIndex] = React.useState<number>(0);
  const topRef = React.useRef<HTMLDivElement>(null);

  const {
    qnaType,
    currentQna,
    prevQna,
    nextQna,
    isLastQna,
    currentSubStepIndex,
    currentStepIndex,
    totalSubStepNum,
    BaumannQNAComponent,
  } = useBaumann(currentQnaIndex);

  const handleScrollToTop = () => {
    if (topRef?.current) {
      const topElement = topRef.current as HTMLDivElement;
      topElement.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }
  };

  const stopSyntheticEvent = React.useCallback((e: React.BaseSyntheticEvent) => {
    e.preventDefault();
    e.stopPropagation();
  }, []);

  const handleClickAnswerItem = React.useCallback(
    (answer: BaumannQNA['Baumann_Answer'][0], e: React.MouseEvent<HTMLElement, MouseEvent>) => {
      stopSyntheticEvent(e);
      if (activeAnswer === answer) {
        setActiveAnswer(null);
      } else {
        setActiveAnswer(answer);
      }
    },
    [activeAnswer, stopSyntheticEvent],
  );

  const loadAnswerFromSessionStorage = (qna: BaumannQNA) => {
    const savedAnswerId = getAnswers()[qna.id];

    setActiveAnswer(qna.Baumann_Answer.find((answer) => answer.id === savedAnswerId) || null);
  };

  const handleClickPrev = React.useCallback(() => {
    if (currentQnaIndex <= 0) {
      return;
    }

    if (activeAnswer) {
      saveAnswer({ questionId: currentQna.id, answerId: activeAnswer.id });
    }

    loadAnswerFromSessionStorage(prevQna);
    setCurrentQnaIndex((prev) => prev - 1);
  }, [activeAnswer, currentQna, currentQnaIndex, prevQna]);

  const handleClickNext = React.useCallback(() => {
    if (!activeAnswer) {
      return;
    }
    saveAnswer({ questionId: currentQna.id, answerId: activeAnswer.id });
    if (isLastQna) {
      link.to('skinTypeTestResult');
      return;
    }
    loadAnswerFromSessionStorage(nextQna);
    setCurrentQnaIndex((prev) => prev + 1);
  }, [activeAnswer, currentQna.id, isLastQna, link, nextQna]);

  React.useEffect(() => {
    resetAnswers();
  }, []);

  React.useEffect(() => {
    handleScrollToTop();
  }, [currentQnaIndex]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledProgressBar
        currentStepIndex={currentStepIndex}
        title={currentQna.type}
        currentSubStepIndex={currentSubStepIndex}
        totalSubStepNum={totalSubStepNum}
      />
      <Content questionType={qnaType}>
        <TopRef ref={topRef} />
        <BaumannQNAComponent
          baumann={{
            id: currentQna.id,
            subStepIndex: currentSubStepIndex,
            question: currentQna.question,
            answers: currentQna.Baumann_Answer,
            imageUrl: currentQna?.imageUrl,
          }}
          activeAnswer={activeAnswer}
          onClickItem={handleClickAnswerItem}
        />
      </Content>

      <BottomPosition>
        <Flex justifyContent="space-between" gap="16px">
          <Button
            variant="outlined"
            Icon={<Icon fill={theme.colors.primary} type="leftArrow" width={14} height={14} />}
            onClick={handleClickPrev}
          >
            <Text variant="body2" fontColor={theme.colors.primary}>
              Prev
            </Text>
          </Button>
          <Button
            variant="filled"
            Icon={<Icon type="rightArrow" fill={theme.colors.white} width={14} height={14} />}
            onClick={handleClickNext}
            iconPosition="end"
          >
            <Text variant="body2" fontColor={theme.colors.white}>
              {isLastQna ? 'End' : 'Next'}
            </Text>
          </Button>
        </Flex>
      </BottomPosition>
    </>
  );
}

const TopRef = styled.div``;

const StyledProgressBar = styled(ProgressBar)`
  position: fixed;
  top: 0;
  padding: 1rem 0;
  background-color: ${({ theme }) => theme.colors.white};
`;

const Content = styled.div<{ questionType: BaumannQuestion['questionType'] }>`
  padding: 140px 20px 90px;
  padding-inline: 20px;
  overflow-y: scroll;
  box-sizing: border-box;
  height: 100%;
  background-color: ${({ theme, questionType }) =>
    questionType === 'PLAIN' ? theme.colors.blue50 : theme.colors.gray50};
`;

const BottomPosition = styled.div`
  position: fixed;
  width: 100%;
  box-sizing: border-box;
  bottom: 0;
  padding: 25px 20px;
  height: 140px;
  background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, #ffffff 44.29%);
`;
